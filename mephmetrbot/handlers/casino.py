from aiogram import Router
from aiogram.types import Message
from aiogram.filters.command import Command, CommandObject
from handlers.models import Users
from tortoise.models import Model
from tortoise import fields
from datetime import datetime, timedelta
import asyncio
from config import bot
import os

router = Router()

async def get_user(user_id):
    user, _ = await Users.get_or_create(id=user_id)
    return user

@router.message(Command('casino'))
async def casino(message: Message, command: CommandObject):
    args = command.args
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
    user = await get_user(user_id)

    bot_user = await get_user(1)
    bot_balance = bot_user.drug_count

    if not args:
        await message.reply("üõë –£–∫–∞–∂–∏ —Å—Ç–∞–≤–∫—É –∏ —É—Å–ª–æ–≤–∏–µ! –ü—Ä–∏–º–µ—Ä:\n`/casino 100 —á–µ—Ç`", parse_mode='markdown')
        return

    parts = args.split()
    try:
        bet = int(parts[0])
    except ValueError:
        await message.reply("üõë –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!", parse_mode='markdown')
        return

    if bet < 10:
        await message.reply("üõë –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ `10` –≥—Ä.", parse_mode='markdown')
        return

    condition = parts[1]
    valid_conditions = ['—á–µ—Ç', '–Ω–µ—á–µ—Ç', '–º–µ–Ω—å—à–µ', '–±–æ–ª—å—à–µ', '—á–µ—Ç–Ω–æ–µ', '–Ω–µ—á–µ—Ç–Ω–æ–µ'] + [str(i) for i in range(1, 7)]
    if condition not in valid_conditions:
        await message.reply("üõë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ! *–£—Å–ª–æ–≤–∏—è: `—á–µ—Ç`, `–Ω–µ—á–µ—Ç`, `–º–µ–Ω—å—à–µ`, `–±–æ–ª—å—à–µ`, `–Ω–µ—á–µ—Ç–Ω–æ–µ`, `—á–µ—Ç–Ω–æ–µ` –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç `1` –¥–æ `6`.*", parse_mode='markdown')
        return

    if not user:
        await message.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    drug_count = user.drug_count
    last_casino = user.last_casino

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if last_casino is not None:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ `last_casino` –≤ offset-naive datetime, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if last_casino.tzinfo is not None:
            last_casino = last_casino.replace(tzinfo=None)

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (offset-naive)
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (now - last_casino) < timedelta(seconds=10):
            await message.reply('‚è≥ –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ *–∫—Ä—É—Ç–∏–ª –∫–∞–∑–∏–∫*, —Å–æ–ª–µ–≤–∞—è –æ–±–µ–∑—å—è–Ω–∞, *–ø–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –ø–æ –±—Ä–∞—Ç—Å–∫–∏.*', parse_mode='markdown')
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    user.last_casino = datetime.now()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (offset-naive)
    await user.save()
    if bet > drug_count:
        await message.reply("üõë –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞!", parse_mode='markdown')
        return
    if bot_balance <= bet:
        await message.reply("üõë –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode='markdown')
        return



    dice_message = await message.answer_dice(emoji='üé≤')
    await asyncio.sleep(3)
    dice_result = dice_message.dice.value
    outcome_message = f"üé≤ –í—ã–ø–∞–ª–æ: `{dice_result}`. "

    if condition == '—á–µ—Ç' or condition == '—á–µ—Ç–Ω–æ–µ':
        if dice_result % 2 == 0:
            win_amount = round(bet * 1.5, 1)
            if win_amount > bot_balance:
                await message.reply("üõë –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–ª–∞—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode='markdown')
            else:
                new_balance = round(drug_count + win_amount, 1)
                new_bot_balance = round(bot_balance - win_amount, 1)
                outcome_message += f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ `{win_amount}` –≥—Ä. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
                user.drug_count = new_balance
                bot_user.drug_count = new_bot_balance
                await user.save()
                await bot_user.save()
                await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#WIN</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
        else:
            win_amount = 0
            new_balance = round(drug_count - bet, 1)
            new_bot_balance = round(bot_balance + bet, 1)
            outcome_message += f'‚ùå –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!. –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
            drug_count = new_balance
            bot_balance = new_bot_balance
            await user.save()
            await bot_user.save()

            await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#LOSE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
    elif condition == '–Ω–µ—á–µ—Ç' or condition == '–Ω–µ—á–µ—Ç–Ω–æ–µ':
        if dice_result % 2 != 0:
            win_amount = round(bet * 1.5, 1)
            if win_amount > bot_balance:
                await message.reply("üõë –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–ª–∞—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode='markdown')
            else:
                new_balance = round(drug_count + win_amount, 1)
                new_bot_balance = round(bot_balance - win_amount, 1)
                outcome_message += f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ `{win_amount}` –≥—Ä. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
                user.drug_count = new_balance
                bot_user.drug_count = new_bot_balance
                await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#WIN</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
        else:
            win_amount = 0
            new_balance = round(drug_count - bet, 1)
            new_bot_balance = round(bot_balance + bet, 1)
            outcome_message += f'‚ùå –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!. –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
            user.drug_count = new_balance
            bot_user.drug_count = new_bot_balance
            await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#LOSE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
    elif condition == '–º–µ–Ω—å—à–µ':
        if dice_result <= 3:
            win_amount = round(bet * 1.5, 1)
            if win_amount > bot_balance:
                await message.reply("üõë –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–ª–∞—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode='markdown')
            else:
                new_bot_balance = round(bot_balance - win_amount, 1)
                new_balance = round(drug_count + win_amount, 1)
                outcome_message += f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ `{win_amount}` –≥—Ä. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
                user.drug_count = new_balance
                bot_user.drug_count = new_bot_balance
                await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#WIN</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
        else:
            win_amount = 0
            new_balance = round(drug_count - bet, 1)
            new_bot_balance = round(bot_balance + bet, 1)
            outcome_message += f'‚ùå –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!. –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
            user.drug_count = new_balance
            bot_user.drug_count = new_bot_balance
            await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#LOSE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
    elif condition == '–±–æ–ª—å—à–µ':
        if dice_result > 3:
            win_amount = round(bet * 1.5, 1)
            if win_amount > bot_balance:
                await message.reply("üõë –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–ª–∞—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode='markdown')
            else:
                new_balance = round(drug_count + win_amount, 1)
                new_bot_balance = round(bot_balance - win_amount, 1)
                outcome_message += f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ `{win_amount}` –≥—Ä. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
                user.drug_count = new_balance
                bot_user.drug_count = new_bot_balance
                await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#WIN</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
        else:
            win_amount = 0
            new_balance = round(drug_count - bet, 1)
            new_bot_balance = round(bot_balance + bet, 1)
            outcome_message += f'‚ùå –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!. –¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
            user.drug_count = new_balance
            bot_user.drug_count = new_bot_balance
            await bot.send_message(os.environ.get('LOGS_CHAT_ID'), f"<b>#CASINO</b> <b>#LOSE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>1.5</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')

    elif condition.isdigit() and int(condition) in range(1, 7):
        number = int(condition)
        if dice_result == number:
            win_amount = round(bet * 3, 1)
            if win_amount > bot_balance:
                await message.reply("üõë –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–ª–∞—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode='markdown')
            else:
                new_balance = round(drug_count + win_amount, 1)
                new_bot_balance = round(bot_balance - win_amount, 1)
                outcome_message += f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ `{win_amount}` –≥—Ä. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.'
                user.drug_count = new_balance
                bot_user.drug_count = new_bot_balance
                await bot.send_message(os.environ.get('LOGS_CHAT_ID'),f"<b>#CASINO</b> <b>#WIN</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>3</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
        else:
            win_amount = 0
            new_balance = round(drug_count - bet, 1)
            new_bot_balance = round(bot_balance + bet, 1)
            user.drug_count = new_balance
            bot_user.drug_count = new_bot_balance
            outcome_message += f'‚ùå –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞. –ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!. *–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` –≥—Ä.*'
            await bot.send_message(os.environ.get('LOGS_CHAT_ID'),f"<b>#CASINO</b> <b>#LOSE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{user_id}</code>\nbet: <code>{bet}</code>\nmultiplier: <code>3</code>\ndrug_count: <code>{drug_count-bet}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>", parse_mode='HTML')
    else:
        await message.reply("üõë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ! *–£—Å–ª–æ–≤–∏—è: `—á–µ—Ç`, `–Ω–µ—á–µ—Ç`, `–º–µ–Ω—å—à–µ`, `–±–æ–ª—å—à–µ`, –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç `1` –¥–æ `6`.*", parse_mode='markdown')
        return
        await user.save()
        await bot_user.save()
    user.last_casino = datetime.now()
    await message.reply(outcome_message, parse_mode='markdown')
