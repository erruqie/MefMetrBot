from aiogram import Router
import os
import random
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton
from aiogram.filters.command import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from tortoise.models import Model
from tortoise import fields
from handlers.models import Users, Clans
from config import bot
from datetime import datetime, timedelta, timezone

router = Router()

async def get_user(user_id):
    user, _ = await Users.get_or_create(id=user_id)
    return user

async def update_user_drug_count(user_id: int, new_count: int):
    user = await Users.get(id=user_id)
    user.drug_count = new_count
    await user.save()

@router.message(Command('profile'))
async def profile_command(message: Message):
    user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
    user = await get_user(user_id)

    if not user:
        await message.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return

    clan_name = None
    if user.clan_member:
        clan = await Clans.get_or_none(id=user.clan_member)
        clan_name = clan.clan_name if clan else None

    username = message.from_user.username if user_id == message.from_user.id else message.reply_to_message.from_user.username
    full_name = message.from_user.full_name if user_id == message.from_user.id else message.reply_to_message.from_user.full_name

    profile_info = f"üë§ *–ò–º—è:* _{full_name}_\nüë• *Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\nüÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{user_id}`\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{user.drug_count}_ –≥—Ä–∞–º–º."
    if user.is_admin:
        profile_info = f"üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\n{profile_info}"
    if clan_name:
        profile_info = f"{profile_info}\nüë• *–ö–ª–∞–Ω:* *{clan_name}*"


    await message.reply(profile_info, parse_mode='markdown')

@router.message(Command('bot_profile'))
async def bot_profile(message: Message, command: CommandObject):
    bot_user = await get_user(1)
    await message.reply(f"ü§ñ *–≠—Ç–æ –ë–æ—Ç*\nüåø *–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞:* _{bot_user.drug_count}_ –≥—Ä–∞–º–º.", parse_mode='markdown')

@router.message(Command('give'))
async def give_command(message: Message, state: FSMContext, command: CommandObject):
    user_id = message.from_user.id
    user = await get_user(user_id)
    args = command.args.split(' ', maxsplit=1)
    try:
        value = int(args[0])
    except ValueError:
        await message.reply('‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        return
    recipient_id = message.reply_to_message.from_user.id if message.reply_to_message else None
    if recipient_id == 7266772626:
        await message.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–æ—Ç—É')
        return
    recipient = await get_user(recipient_id)
    if not recipient:
        await message.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    if value <= 0:
        await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return
    if user.drug_count < value:
        await message.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –º–µ—Ñ–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')
        return
    commission = round(value * 0.10)
    net_value = value - commission
    bot_user = await get_user(7266772626)
    if not bot_user:
        bot_user = await Users.create(id=7266772626, drug_count=0)
    recipient.drug_count += net_value
    user.drug_count -= value
    bot_user.drug_count += commission

    await recipient.save()
    await user.save()

    await bot.send_message(
        os.environ.get('LOGS_CHAT_ID'),
        f"<b>#GIVE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\nuser_id: <code>{recipient_id}</code>\nvalue: <code>{net_value}</code>\nCommission: <code>{commission}</code>\n\n<a href='tg://user?id={recipient_id}'>mention</a>",
        parse_mode='HTML'
    )
    recipient_username = message.reply_to_message.from_user.username if message.reply_to_message else ""
    recipient_full_name = message.reply_to_message.from_user.full_name if message.reply_to_message else ""

    await message.reply(
        f"‚úÖ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) _–ø–æ–¥–∞—Ä–∏–ª(-–∞) {value} –≥—Ä. –º–µ—Ñ–∞_ [{recipient_full_name}](tg://user?id={recipient_id})!\n–ö–æ–º–∏—Å—Å–∏—è: `{commission}` –≥—Ä. –º–µ—Ñ–∞\n–ü–æ–ª—É—á–µ–Ω–æ `{net_value}` –≥—Ä. –º–µ—Ñ–∞.",
        parse_mode='markdown'
    )
@router.message(Command('find'))
async def find_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)

    drug_count, last_used = user.drug_count, user.last_find
    now = datetime.now()

    if last_used:
        last_used = last_used.replace(tzinfo=None)

    if last_used and (now - last_used).total_seconds() < 43200:
        await message.reply('‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ *—Ö–æ–¥–∏–ª –∑–∞ –∫–ª–∞–¥–æ–º, –ø–æ–¥–æ–∂–¥–∏ 12 —á–∞—Å–æ–≤.*', parse_mode='markdown')
        return

    if random.randint(1, 100) > 50:
        count = random.randint(1, 10)
        user.drug_count += count
        user.last_find = now
        user.last_use_time = user.last_use_time = datetime.fromtimestamp(0)
        await bot.send_message(
            os.environ.get('LOGS_CHAT_ID'),
            f"<b>#FIND #WIN</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\ncount: <code>{count}</code>\ndrug_count: <code>{user.drug_count}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>",
            parse_mode='HTML'
        )
        await message.reply(f"üëç {message.from_user.first_name}, —Ç—ã –ø–æ—à—ë–ª –≤ –ª–µ—Å –∏ *–Ω–∞—à–µ–ª –∫–ª–∞–¥*, —Ç–∞–º –ª–µ–∂–∞–ª–æ `{count} –≥—Ä.` –º–µ—Ñ—á–∏–∫–∞!\nüåø –¢–≤–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥—ã /drug –æ–±–Ω–æ–≤–ª–µ–Ω–æ", parse_mode='markdown')
    else:
        count = random.randint(1, round(drug_count))
        user.drug_count -= count
        user.last_find = now
        await bot.send_message(
            os.environ.get('LOGS_CHAT_ID'),
            f"<b>#FIND #LOSE</b>\n\nfirst_name: <code>{message.from_user.first_name}</code>\ncount: <code>{count}</code>\ndrug_count: <code>{user.drug_count}</code>\n\n<a href='tg://user?id={user_id}'>mention</a>",
            parse_mode='HTML'
        )
        await message.reply(f"‚ùå *{message.from_user.first_name}*, —Ç–µ–±—è *—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç* –∏ *–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É*\nüåø –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—É–ø–∏—Ç—å—Å—è, –º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∑—è—Ç–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ `{count} –≥—Ä.`\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ *12 —á–∞—Å–æ–≤.*", parse_mode='markdown')
        await user.save()

@router.message(Command('top'))
async def top_command(message: Message):
    user = await get_user(message.from_user.id)
    top_users = await Users.all().order_by('-drug_count').limit(10)
    if top_users:
        response = "üîù–¢–û–ü 10 –õ–Æ–¢–´–• –ú–ï–§–ï–î–†–û–ù–©–ò–ö–û–í –í –ú–ò–†–ïüîù:\n"
        counter = 1
        for top_user in top_users:
            user_info = await bot.get_chat(top_user.id)
            response += f"{counter}) *{user_info.full_name}*: `{top_user.drug_count} –≥—Ä. –º–µ—Ñ–∞`\n"
            counter += 1
        await message.reply(response, parse_mode='markdown')
    else:
        await message.reply('–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –º–µ—Ñ.')

@router.message(Command('take'))
async def take_command(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    reply_msg = message.reply_to_message
    if reply_msg:
        if reply_msg.from_user.id == 7266772626:
            await message.reply(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –º–µ—Ñ —É –±–æ—Ç–∞')
            return
        if reply_msg.from_user.id != message.from_user.id:
            victim = await get_user(reply_msg.from_user.id)
            if not victim or user.drug_count <= 1 or victim.drug_count <= 1:
                await message.reply('‚ùå –£ –≤–∞—Å –∏–ª–∏ —É –∂–µ—Ä—Ç–≤—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ñ–∞.')
                return
            last_time_data = await state.get_data()
            last_time = last_time_data.get('time') if last_time_data else None

            if last_time and (datetime.now() - datetime.fromisoformat(last_time)).total_seconds() < 86400:
                await message.reply("‚ùå –ù–µ–ª—å–∑—è –ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —Ç–∞–∫ —á–∞—Å—Ç–æ! –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
                return

            variables = ['noticed', 'hit', 'pass']
            randomed = random.choice(variables)
            if randomed == 'noticed':
                user.drug_count -= 1
                await message.reply('‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ —Ç—ã —Ä–µ—à–∏–ª —É–±–µ–∂–∞—Ç—å. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü–æ–∫–∞ —Ç—ã –±–µ–∂–∞–ª, *—Ç—ã –ø–æ—Ç–µ—Ä—è–ª* `1 –≥—Ä.`', parse_mode='markdown')
            elif randomed == 'hit':
                user.drug_count -= 1
                await message.reply('‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ –ø–∏–∑–¥–∞–Ω—É–ª–∞ —Ç–µ–±—è –±—É—Ç—ã–ª–∫–æ–π –ø–æ –±–∞—à–∫–µ. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. *–ñ–µ—Ä—Ç–≤–∞ –¥–æ—Å—Ç–∞–ª–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞* `1 –≥—Ä.`', parse_mode='markdown')
            elif randomed == 'pass':
                victim.drug_count -= 1
                user.drug_count += 1
                await victim.save()
                victim_user_id = reply_msg.from_user.id
                victim_username = f'tg://user?id={victim_user_id}'
                await message.reply(f"‚úÖ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) —Å–ø–∏–∑–¥–∏–ª(-–∞) –æ–¥–∏–Ω –≥—Ä–∞–º –º–µ—Ñ–∞ —É [{reply_msg.from_user.first_name}]({victim_username})!", parse_mode='markdown')
            await state.update_data(time=datetime.now().isoformat())
            await user.save()
    else:
        await message.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –º–µ—Ñ.')

@router.message(Command('drug'))
async def drug_command(message: Message, state: FSMContext):
    user = await get_user(message.from_user.id)

    drug_count, last_use_time = user.drug_count, user.last_use_time
    now = datetime.now()

    if last_use_time:
        last_use_time = last_use_time.replace(tzinfo=None)

    if last_use_time and (now - last_use_time).total_seconds() < 3600:
        remaining_time = timedelta(hours=1) - (now - last_use_time)
        await message.reply(f"‚ùå *{message.from_user.first_name}*, _—Ç—ã —É–∂–µ –Ω—é—Ö–∞–ª(-–∞)!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count} –≥—Ä–∞–º–º` –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `{remaining_time.seconds // 60} –º–∏–Ω—É—Ç.`", parse_mode='markdown')
        return

    if random.randint(0, 100) < 20:
        await message.reply(f"üßÇ *{message.from_user.first_name}*, _—Ç—ã –ø—Ä–æ—Å—ã–ø–∞–ª(-–∞) –≤–µ—Å—å –º–µ—Ñ—á–∏–∫!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`", parse_mode='markdown')
        user.last_use_time = now
        return

    count = random.randint(1, 10)
    user.drug_count += count
    user.last_use_time = now
    await user.save()
    await message.reply(f"üëç *{message.from_user.first_name}*, _—Ç—ã –∑–∞–Ω—é—Ö–Ω—É–ª(-–∞) {count} –≥—Ä–∞–º–º –º–µ—Ñ—á–∏–∫–∞!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{user.drug_count}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`", parse_mode='markdown')


@router.message(Command('help'))
async def help_command(message: Message):
    await message.reply('''–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

`/drug` - *–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ñ–∏–∫*
`/top` - *—Ç–æ–ø —Ç–æ—Ä—á–µ–π –º–∏—Ä–∞*
`/take` - *—Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–∏–∫ —É –±–ª–∏–∂–Ω–µ–≥–æ*
`/give` - *–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ñ–∏–∫–æ–º*
`/casino` - *–∫–∞–∑–∏–Ω–æ*
`/find` - *—Å—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–ª–∞–¥–æ–º*
`/about` - *—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ*
`/clancreate` - *—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω*
`/deposit` - *–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞*
`/withdraw` - *–≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–ª–∞–Ω–∞*
`/clantop` - *—Ç–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞*
`/clanbalance` - *–±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞*
`/claninfo` - *–æ –∫–ª–∞–Ω–µ*
`/claninvite` - *–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω*
`/clankick` - *–∫–∏–∫–Ω—É—Ç—å –∏–∑ –∫–ª–∞–Ω–∞*
`/clanaccept` - *–ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω*
`/clandecline` - *–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω*
`/clanleave` - *–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞*
`/clandisband` - *—Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω*
    ''', parse_mode='markdown')

@router.message(Command('grach'))
async def start_command(message: Message):
    await message.reply("–≥—Ä–∞—á —Ö—É–µ—Å–æ—Å")

@router.message(Command('rules'))
async def start_command(message: Message):
    await message.reply('''–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mephmetrbot:
*1) –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥ - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ *
*2) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–æ—Ç–∞ - –±–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ*
*3) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —á–µ—Ä–µ–∑ —Ç–æ–ø –∫–ª–∞–Ω–æ–≤ –∏ —Ç–æ–ø —é–∑–µ—Ä–æ–≤ - –≤—ã–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–µ –±–∞–Ω —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º*
*4) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ - –æ–±–Ω—É–ª–µ–Ω–∏–µ –∏ –±–∞–Ω*

*–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã.
–°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Ç–∏–≤ –∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.
–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ —è–≤–ª—è–µ—Ç—Å—è —É–≥–æ–ª–æ–≤–Ω–æ –Ω–∞–∫–∞–∑—É–µ–º–æ–π*
*–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º* (*–∫–æ–º–∞–Ω–¥–∞* `/about`)''', parse_mode='markdown')

@router.message(Command('start'))
async def start_command(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üì¢ –ö–∞–Ω–∞–ª', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí∞ –î–æ–Ω–∞—Ç', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí¨ –ß–∞—Ç', url='https://t.me/mefmetrchat')
    )
    await message.reply("üëã *–ó–¥–∞—Ä–æ–≤–∞ —à–Ω—ã—Ä*, —ç—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã *—Å—á–∏—Ç–∞—Ç—å* —Å–∫–æ–ª—å–∫–æ *–≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω—á–∏–∫–∞* —Ç—ã —Å–Ω—é—Ö–∞–ª\nüßë‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω *powerplantsmoke.t.me* –∏ *hateandroid.t.me*", reply_markup=builder.as_markup(), parse_mode='markdown')


@router.message(Command('about'))
async def about_command(message: Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='üì¢ –ö–∞–Ω–∞–ª', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí∞ –î–æ–Ω–∞—Ç', url='https://t.me/mefmetrch'),
        InlineKeyboardButton(text='üí¨ –ß–∞—Ç', url='https://t.me/mefmetrchat')
    )
    await message.reply("üßë‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω powerplantsmoke.t.me –∏ hateandroid.t.me", reply_markup=builder.as_markup())
